import React, { Component } from 'react';

 //import ReactNodeGraph from 'react-node-graph'; 

 import ReactNodeGraph from './ReactNodeGraph';

 var exampleGraph = {
  "nodes":[
    {"nid":1,"type":"Arun","x":1479,"y":351,"fields":{"in":[{"name":"width"},{"name":"height"},{"name":"scene"},{"name":"camera"},{"name":"bg_color"},{"name":"postfx"},{"name":"shadowCameraNear"},{"name":"shadowCameraFar"},{"name":"shadowMapWidth"},{"name":"shadowMapHeight"},{"name":"shadowMapEnabled"},{"name":"shadowMapSoft"}],"out":[]}},
    {"nid":14,"type":"Anil","x":549,"y":478,"fields":{"in":[{"name":"fov"},{"name":"aspect"},{"name":"near"},{"name":"far"},{"name":"position"},{"name":"target"},{"name":"useTarget"}],"out":[{"name":"out"}]}},
    {"nid":23,"type":"Akhil","x":1216,"y":217,"fields":{"in":[{"name":"children"},{"name":"position"},{"name":"rotation"},{"name":"scale"},{"name":"doubleSided"},{"name":"visible"},{"name":"castShadow"},{"name":"receiveShadow"}],"out":[{"name":"out"}]}},
    {"nid":35,"type":"Subhojit","x":948,"y":217,"fields":{"in":[{"name":"in0"},{"name":"in1"},{"name":"in2"},{"name":"in3"},{"name":"in4"},{"name":"in5"}],"out":[{"name":"out"}]}},
    {"nid":45,"type":"Harsh","x":950,"y":484,"fields":{"in":[{"name":"rgb"},{"name":"r"},{"name":"g"},{"name":"b"}],"out":[{"name":"rgb"},{"name":"r"},{"name":"g"},{"name":"b"}]}},
    {"nid":55,"type":"Asmita","x":279,"y":503,"fields":{"in":[{"name":"xyz"},{"name":"x"},{"name":"y"},{"name":"z"}],"out":[{"name":"xyz"},{"name":"x"},{"name":"y"},{"name":"z"}]}},
    {"nid":65,"type":"Vignesh","x":707,"y":192,"fields":{"in":[{"name":"children"},{"name":"position"},{"name":"rotation"},{"name":"scale"},{"name":"doubleSided"},{"name":"visible"},{"name":"castShadow"},{"name":"receiveShadow"},{"name":"geometry"},{"name":"material"},{"name":"overdraw"}],"out":[{"name":"out"}]}},
    {"nid":79,"type":"Surajit","x":89,"y":82,"fields":{"in":[{"name":"reset"},{"name":"pause"},{"name":"max"}],"out":[{"name":"out"}]}},
    {"nid":84,"type":"Mayank","x":284,"y":82,"fields":{"in":[{"name":"in"},{"name":"factor"}],"out":[{"name":"out"}]}},
    {"nid":89,"type":"Vector3","x":486,"y":188,"fields":{"in":[{"name":"xyz"},{"name":"x"},{"name":"y"},{"name":"z"}],"out":[{"name":"xyz"},{"name":"x"},{"name":"y"},{"name":"z"}]}},
    {"nid":85,"type":"Mayank2","x":28,"y":8,"fields":{"in":[{"name":"React"},{"name":"Angular"},{"name":"Java"},{"name":"GCP"},{"name":"IBM Watson"}],"out":[{"name":"x"},{"name":"y"},{"name":"z"}]}},
  ],
  "connections":[
    {"from_node":23,"from":"out","to_node":1,"to":"scene"},
    {"from_node":14,"from":"out","to_node":1,"to":"camera"},
    {"from_node":14,"from":"out","to_node":35,"to":"in5"},
    {"from_node":35,"from":"out","to_node":23,"to":"children"},
    {"from_node":45,"from":"rgb","to_node":1,"to":"bg_color"},
    {"from_node":55,"from":"xyz","to_node":14,"to":"position"},
    {"from_node":65,"from":"out","to_node":35,"to":"in0"},
    {"from_node":79,"from":"out","to_node":84,"to":"in"},
    {"from_node":89,"from":"xyz","to_node":65,"to":"rotation"},
    {"from_node":84,"from":"out","to_node":89,"to":"y"}
  ]
};

export default class ReactNode extends Component {
  
  constructor(props) {
    super(props);
    this.state = exampleGraph;
  }

  // onNewConnector(fromNode,fromPin,toNode,toPin) {
  //   let connections = [...this.state.connections, {
  //     from_node : fromNode,
  //     from : fromPin,
  //     to_node : toNode,
  //     to : toPin
  //   }]

  //   this.setState({connections: connections})
  // }

  // onRemoveConnector(connector) {
  //   let connections = [...this.state.connections]
  //   connections = connections.filter((connection) => {
  //     return connection != connector
  //   })

  //   this.setState({connections: connections})
  // }

  onNodeMove(nid, pos) { 
    console.log('end move : ' + nid, pos)
  }

  onNodeStartMove(nid) { 
    console.log('start move : ' + nid)
  }

  handleNodeSelect(nid) {
    console.log('node selected : ' + nid)
  }

  handleNodeDeselect(nid) {
    console.log('node deselected : ' + nid)
  }

  render() {
      return (
        <ReactNodeGraph 
        data={exampleGraph} 
        onNodeMove={(nid, pos)=>this.onNodeMove(nid, pos)}
        onNodeStartMove={(nid)=>this.onNodeStartMove(nid)}
        // onNewConnector={(n1,o,n2,i)=>this.onNewConnector(n1,o,n2,i)} 
        // onRemoveConnector={(connector)=>this.onRemoveConnector(connector)}
      />
      );      
  }
}



import React from 'react';
import Node from '../src/lib/Node';
import Spline from '../src/lib/Spline';
import SVGComponent from '../src/lib/SVGComponent';

import {computeOutOffsetByIndex, computeInOffsetByIndex} from '../src/lib/util.js';

export default class ReactNodeGraph extends React.Component {

	constructor(props) {
		super(props);

		this.state = {
			data : this.props.data,
			source : [],
			dragging: false
		}

		this.onMouseMove = this.onMouseMove.bind(this);
		this.onMouseUp = this.onMouseUp.bind(this);
	}

	componentDidMount() {
		document.addEventListener('mousemove', this.onMouseMove);
		document.addEventListener('mouseup', this.onMouseUp);
	}

	componentWillUnmount() {
		document.removeEventListener('mousemove', this.onMouseMove);
		document.removeEventListener('mouseup', this.onMouseUp);
	}

	componentWillReceiveProps(nextProps) {
		this.setState({data: nextProps.data});
	}

	onMouseUp(e) {
		this.setState({dragging:false, });
	}

	onMouseMove(e) {
		e.stopPropagation();
  		e.preventDefault();

  		const {svgComponent: {refs: {svg}}} = this.refs;

  		//Get svg element position to substract offset top and left 
  		const svgRect = svg.getBoundingClientRect();

		this.setState({
	      mousePos: {
	        x: e.pageX - svgRect.left,
	        y: e.pageY - svgRect.top
	      }
	    });
	}

	handleNodeStart(nid) {
		this.props.onNodeStartMove(nid);
	}

	handleNodeStop(nid, pos) {
		this.props.onNodeMove(nid, pos);
	}

	handleNodeMove(index, pos) {
		let d = this.state.data;

		d.nodes[index].x = pos.left;
		d.nodes[index].y = pos.top;

		this.setState({data : d});
	}

	handleStartConnector(nid, outputIndex) {
		this.setState({dragging:true, source:[nid,outputIndex] });
	}

	handleCompleteConnector(nid, inputIndex) {
		if (this.state.dragging) {

			let nodes = this.state.data.nodes;
			let fromNode = this.getNodebyId(nodes, this.state.source[0]);
			let fromPinName = fromNode.fields.out[this.state.source[1]].name;
			let toNode = this.getNodebyId(nodes, nid);
			let toPinName = toNode.fields.in[inputIndex].name;

			// this.props.onNewConnector(fromNode.nid, fromPinName, toNode.nid, toPinName);
		}
		this.setState({dragging:false});
	}

	handleRemoveConnector(connector) {
		if (this.props.onRemoveConnector) {
			this.props.onRemoveConnector(connector);
		}
	}

  handleNodeSelect(nid) {
		if (this.props.onNodeSelect) {
			this.props.onNodeSelect(nid);
		}
  }

  handleNodeDeselect(nid) {
    if (this.props.onNodeDeselect) {
      this.props.onNodeDeselect(nid);
    }
  }

	computePinIndexfromLabel(pins, pinLabel) {
		let reval = 0;

		for (let pin of pins) {
			if (pin.name === pinLabel) {
				return reval;
			} else {
				reval++;
			}

		}
	}

	getNodebyId(nodes, nid) {
		let reval = 0;

		for (let node of nodes) {
			if (node.nid === nid) {
				return nodes[reval];
			} else {
				reval++;
			}
		}
	}


	render() {
		let nodes = this.state.data.nodes;
		let connectors = this.state.data.connections;
    let { mousePos, dragging } = this.state;

		let i = 0;
		let newConnector = null;

		if (dragging) {

			let sourceNode = this.getNodebyId(nodes, this.state.source[0]);
			let connectorStart = computeOutOffsetByIndex(sourceNode.x, sourceNode.y, this.state.source[1]);
			let connectorEnd = {x:this.state.mousePos.x, y:this.state.mousePos.y};
					
			newConnector = <Spline 
              				 start={connectorStart}
              				 end={connectorEnd}
              			 />
		}

		let splineIndex = 0;

		return (
			<div className={dragging ? 'dragging' : ''} >
				{nodes.map((node)=> {
					return <Node 
    								index={i++} 
    								nid={node.nid}
    								title={node.type}
    								inputs={node.fields.in}
    								outputs={node.fields.out}
    								pos={{x : node.x, y: node.y}}
    								key={node.nid} 

    								onNodeStart={(nid)=>this.handleNodeStart(nid)}
    								onNodeStop={(nid, pos)=>this.handleNodeStop(nid, pos)}
    								onNodeMove={(index,pos)=>this.handleNodeMove(index,pos)}
    								
    								onStartConnector={(nid, outputIndex)=>this.handleStartConnector(nid, outputIndex)}
    								onCompleteConnector={(nid, inputIndex)=>this.handleCompleteConnector(nid, inputIndex)}

										onNodeSelect={(nid) => {this.handleNodeSelect(nid)}}
										onNodeDeselect={(nid) => {this.handleNodeDeselect(nid)}}
									/>
				})}
				
				{/* render our connectors */} 

				<SVGComponent height="100%" width="100%" ref="svgComponent">

					{connectors.map((connector)=> {
						let fromNode = this.getNodebyId(nodes,connector.from_node);
						let toNode = this.getNodebyId(nodes,connector.to_node);

						let splinestart = computeOutOffsetByIndex(fromNode.x, fromNode.y, this.computePinIndexfromLabel(fromNode.fields.out, connector.from));
						let splineend = computeInOffsetByIndex(toNode.x, toNode.y, this.computePinIndexfromLabel(toNode.fields.in, connector.to));

						return <Spline 
							start={splinestart}
							end={splineend}
							key={splineIndex++}
							mousePos={mousePos}
							onRemove={() => {this.handleRemoveConnector(connector)}}
						/>

					})}

					{/* this is our new connector that only appears on dragging */}
					{newConnector}

				</SVGComponent>
			</div>
		);
	}
}
